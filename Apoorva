1) Write a C program that accepts the vertices and edges of a graph and stores it as an adjacency

matrix. Display the adjacency matrix.

#include <stdio.h>

typedef struct node

{

int vertex;

struct node *next;

}NODE;

void createmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

m[i][j] = 0;

if(i != j)

{

printf(“\n Is there an edge between %d and %d (1/0) : ”, i+1, j+1);

scanf(“%d”,&m[i][j]);

}

}

}

}

void dispmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

printf(“%5d”,m[i][j]);

printf(“\n”);

}

}

}

void main()

{

int m[10][10];

printf(“\n Enter the number of vertices\n);

scanf(“%d”,&n);
creatmat(m,n);

dispmat(m,n); 
}


 
2) Write a C program that accepts the vertices and edges of a graph and store it as an adjacency 
matrix. Implement functions to print indegree, outdegree and total degree of all vertices of

graph.

#include <stdio.h>

typedef struct node

{

int vertex;

struct node *next;

}NODE;

void createmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

m[i][j] = 0;

if(i != j)

{

printf(“\n Is there an edge between %d and %d (1/0) : ”, i+1, j+1);

scanf(“%d”,&m[i][j]);

}

}

}

}

void dispmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

printf(“%5d”,m[i][j]);

printf(“\n”);

}

}

}
void degree(int m[10][10], int n)

{

int v,in,out,total;

for(v=0;v<n;v++)

{

for(i=0;i<n;i++)

{

in = in + m[i][v];

out = out + m[i][v];

}

}

}

void main()

{

int m[10][10];

printf(“\n Enter the number of vertices\n);

scanf(“%d”,&n);

creatmat(m,n);

dispmat(m,n);

degree(m,n);

}

SET B

1) Write a C program that accepts the vertices and edges of a graph and store it as an adjacency

matrix. Implement function to traverse the graph using Breadth First Search (BFS) traversal.

#include <stdio.h>

int n, i, j, visited[10], queue[10], front = -1, rear = -1;

int adj[10][10];

void bfs(int v)

{

for (i = 1; i <= n; i++)

if (adj[v][i] && !visited[i])

queue[++rear] = i;

if (front <= rear)

{

visited[queue[front]] = 1;

bfs(queue[front++]);

}

}
void main()

{

int v;

printf("Enter the number of vertices: ");

scanf("%d", &n);

for (i = 1; i <= n; i++)

{

queue[i] = 0;

visited[i] = 0;

}

printf("Enter graph data in matrix form: \n");

for (i = 1; i <= n; i++)

for (j = 1; j <= n; j++)

scanf("%d", &adj[i][j]);

printf("Enter the starting vertex: ");

scanf("%d", &v);

bfs(v);

printf("The node which are reachable are: \n");

for (i = 1; i <= n; i++)

if (visited[i])

printf("%d\t", i);

else

printf("BFS is not possible. Not all nodes are reachable");

return 0;

}

2) Write a C program that accepts the vertices and edges of a graph and store it as an adjacency

matrix. Implement a function to traverse the graph using Depth First Search (DFS) traversal.

#include <stdio.h>

typedef struct node

{

int vertex;

struct node *next;

}NODE;

void createmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

m[i][j] = 0;

if(i != j)
{

printf(“\n Is there an edge between %d and %d (1/0) : ”, i+1, j+1);

scanf(“%d”,&m[i][j]);

}

}

}

}

void dispmat(int m[10][10], int n)

{

int i, j;

char ans;

for(i=0;i<n;i++)

{

for(j=0;j<n;j++)

{

printf(“%5d”,m[i][j]);

printf(“\n”);

}

}

}

Void dfs(int m[10][10] , int n, int v)

{

Int w;

Static int visited[20] = {0};

Visited[v] = 1;

printf(“v%d”,v+1);

for(w=0;w<n;w++)

{

if((m[v][w] == 1) && (visited[w] == 0)

dfs(m,n,w);

}

}

void main()

{

int m[10][10];

printf(“\n Enter the number of vertices\n);

scanf(“%d”,&n);

creatmat(m,n);

dispmat(m,n);

dfs(m,n,0);

}
